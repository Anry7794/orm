Relationships
=============

Orm provides very efficient way to work with entity relationships. Orm recognize 5 types of relationships:

- **1:m** - one has many: *author has many books*
- **m:1** - many has one: *book has one author*
- **m:n** - many has many: *book has many tags, tag is associated with many books*
- **1:1** - one has one: *user has one settings*, the reference for related entity is stored only on the side that is marked as a primary

To define relationship property use relationship modifier. They all require target entity with its reverse property; other parameters are optional: ordering, or making the current side primary (persisting is driven by the primary side). At least one side of `m:n` or `1:1d` has to be defined as the primary. Relationships do not support getters and setters as other entity properties.

/--code php
{1:1 EntityName::$reversePropertyName}
{m:1 EntityName::$reversePropertyName}
{1:m EntityName::$reversePropertyName, orderBy=property}
{m:n EntityName::$reversePropertyName, primary=true, orderBy=[property, DESC]}
\--


1:M / M:1 - Bidirectional
-------------------------

/--code php
use Nextras\Orm\Relationships\OneHasMany;

/**
 * @property int                $id               {primary}
 * @property OneHasMany|Book[]  $books            {1:m Book::$author}
 * @property OneHasMany|Book[]  $translatedBooks  {1:m Book::$translator}
 */
class Author extends Nextras\Orm\Entity\Entity
{}

/**
 * @property int     $id          {primary}
 * @property Author  $author      {m:1 Author::$books}
 * @property Author  $translator  {m:1 Author::$translatedBooks}
 */
class Book extends Nextras\Orm\Entity\Entity
{}
\--

1:M / M:1 - Self-referencing
----------------------------

/--code php
use Nextras\Orm\Relationships\OneHasMany;

/**
 * @property int                    $id          {primary}
 * @property Category               $parent      {m:1 Category::$categories}
 * @property OneHasMany|Category[]  $categories  {1:m Category::$parent}
 */
class Category extends Nextras\Orm\Entity\Entity
{}
\--

M:M - Bidirectional
-------------------

/--code php
use Nextras\Orm\Relationships\ManyHasMany;

/**
 * @property int                $id    {primary}
 * @property ManyHasMany|Tag[]  $tags  {m:n Tag::$books, primary=true}
 */
class Book extends Nextras\Orm\Entity\Entity
{}

/**
 * @property int                 $id     {primary}
 * @property ManyHasMany|Book[]  $books  {m:n Book::$tags}
 */
class Tag extends Nextras\Orm\Entity\Entity
{}
\--

M:M - Self-referencing
----------------------

/--code php
use Nextras\Orm\Relationships\ManyHasMany;

/**
 * @property int                 $id             {primary}
 * @property ManyHasMany|User[]  $myFriends      {m:m User::$friendsWithMe}
 * @property ManyHasMany|User[]  $friendsWithMe  {m:m User::$myFriends}
 */
class User extends Nextras\Orm\Entity\Entity
{}
\--

1:1 - Bidirectional
-------------------

Reference will be stored in `book.ean_id`.

/--code php
/**
 * @property int      $id   {primary}
 * @property EanCode  $ean  {1:1 Ean::$book, primary=true}
 */
class Book extends Nextras\Orm\Entity\Entity
{}

/**
 * @property int   $id    {primary}
 * @property Book  $book  {1:1 Book::$ean}
 */
class Tag extends Nextras\Orm\Entity\Entity
{}
\--

1:1 - Self-referencing
----------------------

Reference will be stored in `book.next_volume_id`.

/--code php
/**
 * @property int        $id              {primary}
 * @property Book|NULL  $nextVolume      {1:1 Book::$previousVolume, primary=true}
 * @property Book|NULL  $previousVolume  {1:1 Book::$nextVolume}
 */
class Book extends Nextras\Orm\Entity\Entity
{}
\--

------------

Relationship interfaces
-----------------------

The example above introduces classes which weren't mentioned before: `OneHasMany` and `ManyHasMany`. Instances of these classes are injected into the property and provide some cool features. The main responsibility is the implementation of `\Traversable` interface. You can easily iterate over the property to get the entities in the relationship.

/--php
foreach ($author->books as $book) {
	$book instanceof Book; // true
}
\--

Also, you can use very clever interface to add, remove, and set entities in relationship. Sometimes, it is useful to work with the relationship collection as with the `ICollection`. Just use `get()` method to get it.

/--php
use Nextras\Orm\Collection\ICollection;

$author->books->add($book);
$author->books->remove($book);
$author->books->set([$book]);
$author->books->get() instanceof ICollection; // true

$book->tags->add($tag);
$book->tags->remove($tag);
$book->tags->set([$tag]);
$book->tags->get() instanceof ICollection; // true
\--

These methods accept both entity instances and primary values. If you pass primary value, Orm will load the proper entity automatically.

/--php
$book->author = 1;
$book->author->id === 1; // true
\--
